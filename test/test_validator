import pytest
from validator import Validator

# --- 1. Тести базової логіки та ланцюжків ---

def test_valid_chain_email():
    """Тест успішного ланцюжка: валідний email."""
    v = Validator("test@example.com").is_not_empty().is_email()
    assert v.is_valid() is True
    assert v.get_errors() == []

def test_valid_chain_number():
    """Тест успішного ланцюжка: валідне число."""
    v = Validator(10).is_in_range(5, 15)
    assert v.is_valid() is True
    assert v.get_errors() == []

def test_chain_fail_at_first_step():
    """Тест ланцюжка, що провалюється на першому кроці."""
    v = Validator("  ").is_not_empty().is_email()
    assert v.is_valid() is False
    assert v.get_errors() == ["Value cannot be empty or whitespace"]

def test_chain_fail_at_second_step():
    """Тест ланцюжка, що провалюється на другому кроці."""
    v = Validator("not-an-email").is_not_empty().is_email()
    assert v.is_valid() is False
    assert v.get_errors() == ["Invalid email format"]

def test_chain_multiple_errors():
    """Тест ланцюжка, що збирає декілька помилок."""
    # "not-an-email" також не проходить is_strong_password
    v = Validator("not-an-email").is_email().is_strong_password()
    assert v.is_valid() is False
    assert len(v.get_errors()) == 2
    assert "Invalid email format" in v.get_errors()
    assert "Password is not strong" in v.get_errors()[1]

def test_stop_validation_on_type_error():
    """Тест: валідація має зупинитись, якщо тип невірний."""
    v = Validator(12345).is_not_empty().is_email()
    assert v.is_valid() is False
    # Має бути ТІЛЬКИ одна помилка про тип
    assert v.get_errors() == ["Value must be of type str, got int"]

def test_none_input():
    """Тест: валідація на None."""
    v = Validator(None)
    assert v.is_valid() is False
    assert v.get_errors() == ["Value cannot be None"]
    
    # Перевіряємо, що подальші виклики не додають помилок
    v.is_email().is_not_empty()
    assert v.get_errors() == ["Value cannot be None"]

# --- 2. Тести окремих методів з параметризацією ---

@pytest.mark.parametrize("value, expected_valid, error_msg", [
    (10, True, None),
    (0, True, None),
    (100, True, None),
    (-1, False, "Value must be between 0 and 100"),
    (101, False, "Value must be between 0 and 100"),
])
def test_is_in_range(value, expected_valid, error_msg):
    """Параметризований тест для is_in_range."""
    v = Validator(value).is_in_range(0, 100)
    assert v.is_valid() is expected_valid
    if not expected_valid:
        assert v.get_errors() == [error_msg]

@pytest.mark.parametrize("password, expected_valid, contains_error", [
    ("P@ssword123", True, None),
    ("P@s1", False, "at least 8 characters"),
    ("p@ssword123", False, "one uppercase letter"),
    ("P@SSWORD123", False, "one lowercase letter"),
    ("P@sswordABC", False, "one digit"),
    ("Password123", False, "one special symbol"),
    ("weak", False, "at least 8 characters"), # Тут спрацює декілька помилок
])
def test_is_strong_password(password, expected_valid, contains_error):
    """Параметризований тест для is_strong_password."""
    v = Validator(password).is_strong_password()
    assert v.is_valid() is expected_valid
    if not expected_valid:
        assert contains_error in v.get_errors()[0]

def test_password_multiple_failings():
    """Тест паролю, що не проходить декілька перевірок одночасно."""
    v = Validator("weak").is_strong_password()
    assert v.is_valid() is False
    error = v.get_errors()[0]
    assert "at least 8 characters" in error
    assert "one uppercase letter" in error
    assert "one digit" in error
    assert "one special symbol" in error

# --- 3. Тести кастомних повідомлень ---

def test_custom_error_message_is_not_empty():
    """Тест: перевірка кастомного повідомлення про помилку."""
    custom_msg = "Email є обов'язковим полем"
    v = Validator("").is_not_empty(message=custom_msg)
    assert v.is_valid() is False
    assert v.get_errors() == [custom_msg]

def test_custom_error_message_is_phone():
    """Тест: кастомне повідомлення для методу, що використовує інший метод."""
    custom_msg = "Введіть коректний номер +380"
    v = Validator("12345").is_phone(country_code="+380", message=custom_msg)
    assert v.is_valid() is False
    assert v.get_errors() == [custom_msg]

def test_custom_error_message_is_email_domain():
    """Тест: кастомне повідомлення для перевірки домену."""
    custom_msg = "Дозволені лише корпоративні адреси"
    v = Validator("user@gmail.com").is_email(required_domain="corp.com", message=custom_msg)
    assert v.is_valid() is False
    assert v.get_errors() == [custom_msg]

# --- 4. Тести з доменами та кодами країн ---

def test_is_phone_with_specific_country_code_pass():
    """Тест: валідний номер з вказаним кодом країни (+48)"""
     v = Validator("+48123456789").is_phone(country_code="+48")
    assert v.is_valid() is True

def test_is_phone_with_specific_country_code_fail():
    """Тест: невалідний номер (інший код)"""
    v = Validator("+1123456789").is_phone(country_code="+48")
    assert v.is_valid() is False
    assert "must start with +48" in v.get_errors()[0]

def test_is_phone_with_specific_code_fail_digits():
    """Тест: код правильний, але далі літери"""
    v = Validator("+380testtest").is_phone(country_code="+380")
    assert v.is_valid() is False
    assert "must start with +380" in v.get_errors()[0]

def test_is_phone_generic_pass():
    """Тест: валідний номер (загальний формат) без вказання коду"""
    v = Validator("+1234567890123").is_phone()  # No country code
    assert v.is_valid() is True

def test_is_phone_generic_fail_no_plus():
    """Тест: невалідний номер (загальний формат) - немає '+'"""
    v = Validator("123456789").is_phone()  # No country code
    assert v.is_valid() is False
    assert "Invalid phone format" in v.get_errors()[0]

def test_is_email_with_required_domain_pass():
    """Тест: валідний email з правильним доменом"""
    v = Validator("user@mycompany.com").is_email(required_domain="mycompany.com")
    assert v.is_valid() is True

def test_is_email_with_required_domain_fail():
    """Тест: валідний email, але невірний домен"""
    v = Validator("user@other.com").is_email(required_domain="mycompany.com")
    assert v.is_valid() is False
    assert "must be from domain @mycompany.com" in v.get_errors()[0]

 def test_is_email_with_required_domain_case_insensitive():
    """Тест: перевірка домену нечутлива до регістру"""
    v = Validator("user@MYCOMPANY.COM").is_email(required_domain="mycompany.com")
    assert v.is_valid() is True
        
    v2 = Validator("user@mycompany.com").is_email(required_domain="MYCOMPANY.COM")
    assert v2.is_valid() is True

def test_is_email_required_domain_but_invalid_format():
    """Тест: email невалідний, перевірка домену не має спрацювати"""
    v = Validator("usermycompany.com").is_email(required_domain="mycompany.com")
    assert v.is_valid() is False
    # Має бути ТІЛЬКИ одна помилка - про невірний формат
    assert len(v.get_errors()) == 1
    assert "Invalid email format" in v.get_errors()[0]
